definitions:
  createEventDto.CreateEventRequest:
    properties:
      city:
        maxLength: 255
        type: string
      country:
        type: string
      description:
        example: Sample description
        maxLength: 255
        type: string
      name:
        maxLength: 32
        minLength: 3
        type: string
    required:
    - description
    - name
    type: object
  dtos.Event:
    properties:
      id:
        format: uuid
        type: string
      name:
        example: Go Crash Course
        type: string
      questions:
        items:
          $ref: '#/definitions/dtos.Question'
        type: array
    required:
    - id
    - name
    - questions
    type: object
  dtos.Question:
    properties:
      id:
        format: uuid
        type: string
      question:
        type: string
      rating:
        type: integer
    type: object
  errorDto.DomainError:
    properties:
      domainErrorCode:
        type: integer
      message:
        type: string
    type: object
  errorDto.DomainErrorWrapper:
    properties:
      errors:
        items:
          $ref: '#/definitions/errorDto.DomainError'
        type: array
      timestamp:
        type: string
    type: object
info:
  contact: {}
  description: REST API server for Loop aka 'the Feedback' app
  title: Loop
paths:
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: |-
        DomainErrorCodes:
        2: Email is already in use
        3: Password not secure
      produces:
      - application/json
      responses:
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errorDto.DomainErrorWrapper'
      summary: Registers a user
      tags:
      - Auth
  /api/v1/events:
    post:
      consumes:
      - application/json
      description: Creates an event
      parameters:
      - description: Required parameters to create an event
        in: body
        name: Event
        required: true
        schema:
          $ref: '#/definitions/dtos.Event'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/createEventDto.CreateEventRequest'
        "419":
          description: ""
          schema:
            $ref: '#/definitions/errorDto.DomainErrorWrapper'
      summary: Creates an event
      tags:
      - Event
  /api/v1/events/{id}:
    get:
      consumes:
      - application/json
      description: Get a specific event by ID
      parameters:
      - description: id for fetching given event
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errorDto.DomainErrorWrapper'
      summary: Get a specific event by ID
      tags:
      - Event
swagger: "2.0"
